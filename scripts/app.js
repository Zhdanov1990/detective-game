let currentCase = null;
let currentScene = null;
let playerData = {
    name: '–î–µ—Ç–µ–∫—Ç–∏–≤',
    stars: 50,
    unlockedCases: ['hotel_murder'],
    currentCase: null,
    collectedClues: [],
    interrogationLog: [],
    caseProgress: {}
};

document.addEventListener('DOMContentLoaded', async () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    if (window.Telegram.WebApp.initDataUnsafe.user) {
        playerData.name = window.Telegram.WebApp.initDataUnsafe.user.first_name || playerData.name;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const savedData = localStorage.getItem('detectiveSave');
    if (savedData) {
        try {
            const parsedData = JSON.parse(savedData);
            playerData = {...playerData, ...parsedData};
        } catch (e) {
            console.error('Error parsing saved data:', e);
        }
    }
    
    await loadCases();
    setupDonateButton();
    setupAboutModal();
    setupCluesModal();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    if (playerData.currentCase) {
        document.getElementById('continue-btn').style.display = 'block';
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–ª–∏–∫
    document.getElementById('clues-btn').addEventListener('click', showCluesModal);
});

async function loadCases() {
    try {
        const response = await fetch('cases/cases-list.json');
        const cases = await response.json();
        const casesList = document.getElementById('cases-list');
        casesList.innerHTML = '';

        for (const caseItem of cases) {
            const caseElement = document.createElement('div');
            caseElement.className = `case-item ${playerData.unlockedCases.includes(caseItem.id) ? '' : 'locked'}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–º—É –¥–µ–ª—É
            const progress = playerData.caseProgress[caseItem.id] || 0;
            const progressBar = progress > 0 ? `<div class="progress-bar"><div style="width:${progress}%"></div></div>` : '';
            
            caseElement.innerHTML = `
                <div class="case-content">
                    <h3>${caseItem.title}</h3>
                    <p>${caseItem.description}</p>
                    ${progressBar}
                    <div class="case-buttons">
                        ${!playerData.unlockedCases.includes(caseItem.id) ? 
                        `<button class="unlock-btn" data-case="${caseItem.id}" 
                                data-price="${caseItem.price}">
                            üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (${caseItem.price} ‚≠ê)
                        </button>` : ''}
                        <button class="play-btn" data-case="${caseItem.id}">
                            ${progress > 0 ? '‚Ü™Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : 'üîç –ù–∞—á–∞—Ç—å'}
                        </button>
                    </div>
                </div>
            `;
            
            casesList.appendChild(caseElement);
        }

        document.querySelectorAll('.play-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const caseId = e.target.dataset.case;
                await startCase(caseId);
            });
        });

        document.querySelectorAll('.unlock-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const caseId = e.target.dataset.case;
                const price = parseInt(e.target.dataset.price);
                await unlockCase(caseId, price);
            });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–≤–µ–∑–¥
        document.getElementById('stars-count').textContent = playerData.stars;
    } catch (error) {
        console.error('Error loading cases:', error);
    }
}

async function startCase(caseId) {
    try {
        const path = `cases/${caseId.includes('premium') ? 'premium' : 'free'}/${caseId}.json`;
        const response = await fetch(path);
        currentCase = await response.json();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (playerData.currentCase === caseId && playerData.caseProgress[caseId]) {
            playerData.collectedClues = playerData.caseProgress[caseId].clues || [];
            playerData.interrogationLog = playerData.caseProgress[caseId].log || [];
        } else {
            playerData.collectedClues = [];
            playerData.interrogationLog = [];
        }
        
        playerData.currentCase = caseId;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        localStorage.setItem('detectiveSave', JSON.stringify(playerData));
        
        document.getElementById('main-menu').style.display = 'none';
        document.getElementById('game-container').style.display = 'block';
        document.getElementById('ending-screen').style.display = 'none';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É
        const startScene = playerData.caseProgress[caseId]?.currentScene || currentCase.startScene;
        showScene(startScene);
    } catch (error) {
        console.error('Error loading case:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

function showScene(sceneId) {
    const scene = currentCase.scenes[sceneId];
    if (!scene) {
        console.error(`Scene not found: ${sceneId}`);
        showEnding();
        return;
    }
    
    currentScene = sceneId;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (playerData.currentCase) {
        playerData.caseProgress[playerData.currentCase] = {
            currentScene: sceneId,
            clues: [...playerData.collectedClues],
            log: [...playerData.interrogationLog]
        };
        localStorage.setItem('detectiveSave', JSON.stringify(playerData));
    }
    
    document.getElementById('case-title').textContent = currentCase.title;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
    const sceneTextElement = document.getElementById('scene-text');
    sceneTextElement.innerHTML = scene.text.replace(/{name}/g, playerData.name);
    sceneTextElement.style.animation = 'none'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
        sceneTextElement.style.animation = 'fadeIn 0.8s ease-out forwards';
    }, 10);
    
    const choicesContainer = document.getElementById('choices');
    choicesContainer.innerHTML = '';
    
    if (scene.choices) {
        scene.choices.forEach(choice => {
            const button = document.createElement('button');
            button.className = 'choice-btn';
            button.innerHTML = choice.text;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤—ã–±–æ—Ä
            if (choice.requiredClue && !playerData.collectedClues.includes(choice.requiredClue)) {
                button.disabled = true;
                button.title = `–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª–∏–∫–∞: "${choice.requiredClue}"`;
                button.classList.add('disabled-choice');
            }
            
            button.onclick = () => {
                // –î–æ–±–∞–≤–ª—è–µ–º —É–ª–∏–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if (choice.clue) {
                    playerData.collectedClues.push(choice.clue);
                    updateCluesUI();
                    
                    // –ê–Ω–∏–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —É–ª–∏–∫—É
                    const cluesBtn = document.getElementById('clues-btn');
                    cluesBtn.classList.add('new-clue');
                    setTimeout(() => cluesBtn.classList.remove('new-clue'), 2000);
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø—Ä–æ—Å—ã
                if (choice.text.includes('‚ùì')) {
                    const characterMatch = scene.text.match(/<b>(.*?)<\/b>/);
                    const character = characterMatch ? characterMatch[1] : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
                    
                    playerData.interrogationLog.push({
                        character: character,
                        question: choice.text.replace('‚ùì', '').trim(),
                        answer: choice.response || "–û—Ç–≤–µ—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω"
                    });
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                localStorage.setItem('detectiveSave', JSON.stringify(playerData));
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ
                showScene(choice.next);
            };
            choicesContainer.appendChild(button);
        });
    } else if (scene.final) {
        showEnding(sceneId);
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞ –∏ —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        console.error('No choices and not final scene:', sceneId);
        returnToMenu();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–ª–∏–∫
    updateCluesUI();
}

function showEnding(endingScene = "bad_ending") {
    const ending = currentCase.scenes[endingScene];
    
    if (!ending) {
        console.error(`Ending scene not found: ${endingScene}`);
        returnToMenu();
        return;
    }
    
    document.getElementById('ending-title').textContent = 
        endingScene.includes('true') ? '–î–µ–ª–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ!' :
        endingScene.includes('good') ? '–£—Å–ø–µ—Ö!' : 
        endingScene.includes('neutral') ? '–ö–æ–º–ø—Ä–æ–º–∏—Å—Å' : '–ü—Ä–æ–≤–∞–ª';
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ü–æ–≤–∫–∏
    const endingTextElement = document.getElementById('ending-text');
    endingTextElement.innerHTML = ending.text;
    endingTextElement.style.animation = 'none';
    setTimeout(() => {
        endingTextElement.style.animation = 'fadeIn 0.8s ease-out forwards';
    }, 10);
    
    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    let starsEarned = 0;
    if (endingScene.includes('true')) starsEarned = 30;
    else if (endingScene.includes('good')) starsEarned = 20;
    else if (endingScene.includes('neutral')) starsEarned = 10;
    
    if (starsEarned > 0) {
        playerData.stars += starsEarned;
        starsInfo = `<p>‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤—ë–∑–¥: +${starsEarned}</p>`;
    }
    
    document.getElementById('ending-stats').innerHTML = `
        <p>üîç –°–æ–±—Ä–∞–Ω–æ —É–ª–∏–∫: ${playerData.collectedClues.length}/${currentCase.cluesToSolve}</p>
        <p>üë• –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –¥–æ–ø—Ä–æ—Å–æ–≤: ${playerData.interrogationLog.length}</p>
        ${starsEarned > 0 ? `<p>‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤—ë–∑–¥: +${starsEarned}</p>` : ''}
        <p>‚öñÔ∏è –ò—Ç–æ–≥: ${endingScene.includes('true') ? '–ü–æ–ª–Ω–∞—è –ø–æ–±–µ–¥–∞' : 
                      endingScene.includes('good') ? '–£—Å–ø–µ—Ö' : 
                      endingScene.includes('neutral') ? '–ö–æ–º–ø—Ä–æ–º–∏—Å—Å' : '–ü—Ä–æ–≤–∞–ª'}</p>
    `;
    
    document.getElementById('game-container').style.display = 'none';
    document.getElementById('ending-screen').style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–ª–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    playerData.currentCase = null;
    delete playerData.caseProgress[currentCase.id];
    localStorage.setItem('detectiveSave', JSON.stringify(playerData));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ª
    setTimeout(loadCases, 1000);
}

function updateCluesUI() {
    document.getElementById('clues-count').textContent = playerData.collectedClues.length;
    document.getElementById('clue-counter').innerHTML = `üîç –£–ª–∏–∫: ${playerData.collectedClues.length}/${currentCase.cluesToSolve}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –¥–µ–ª
    if (currentCase && playerData.currentCase) {
        const progress = Math.min(100, Math.round((playerData.collectedClues.length / currentCase.cluesToSolve) * 100));
        playerData.caseProgress[playerData.currentCase] = {
            progress: progress,
            currentScene: currentScene,
            clues: [...playerData.collectedClues],
            log: [...playerData.interrogationLog]
        };
        localStorage.setItem('detectiveSave', JSON.stringify(playerData));
    }
}

function showCluesModal() {
    const modal = document.getElementById('clues-modal');
    const cluesList = document.getElementById('clues-list');
    cluesList.innerHTML = '';
    
    if (playerData.collectedClues.length === 0) {
        cluesList.innerHTML = '<li class="no-clues">–£–ª–∏–∫ –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!</li>';
    } else {
        playerData.collectedClues.forEach((clue, index) => {
            const clueItem = document.createElement('li');
            clueItem.className = 'clue-item';
            clueItem.innerHTML = `<span class="clue-number">${index + 1}.</span> ${clue}`;
            cluesList.appendChild(clueItem);
        });
    }
    
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function setupCluesModal() {
    const modal = document.getElementById('clues-modal');
    const span = modal.querySelector('.close-btn');
    
    span.onclick = function() {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    
    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    }
    
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && modal.style.display === 'flex') {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });
}

function returnToMenu() {
    document.getElementById('game-container').style.display = 'none';
    document.getElementById('ending-screen').style.display = 'none';
    document.getElementById('main-menu').style.display = 'block';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    if (playerData.currentCase) {
        playerData.caseProgress[playerData.currentCase] = {
            currentScene: currentScene,
            clues: [...playerData.collectedClues],
            log: [...playerData.interrogationLog],
            progress: Math.min(100, Math.round((playerData.collectedClues.length / currentCase.cluesToSolve) * 100))
        };
        localStorage.setItem('detectiveSave', JSON.stringify(playerData));
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ª
    loadCases();
}

function setupAboutModal() {
    const modal = document.getElementById('about-modal');
    const btn = document.getElementById('about-btn');
    const span = document.getElementsByClassName('close-btn')[0];

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    btn.onclick = function() {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    span.onclick = function() {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–∫–Ω–∞
    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && modal.style.display === 'flex') {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });
}

function setupDonateButton() {
    document.getElementById('donate-btn').addEventListener('click', () => {
        if (window.Telegram.WebApp.openInvoice) {
            const invoice = {
                title: "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞",
                description: "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏",
                currency: "USD",
                prices: [
                    { label: "50 –∑–≤–µ–∑–¥", amount: "5000" }, // $5.00
                    { label: "100 –∑–≤–µ–∑–¥", amount: "10000" } // $10.00
                ]
            };
            
            window.Telegram.WebApp.openInvoice(invoice, (status) => {
                if (status === 'paid') {
                    playerData.stars += 50;
                    localStorage.setItem('detectiveSave', JSON.stringify(playerData));
                    alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! +50 –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à —Å—á—ë—Ç.');
                    document.getElementById('stars-count').textContent = playerData.stars;
                }
            });
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
        }
    });
}

async function unlockCase(caseId, price) {
    if (playerData.stars < price) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ: ${price}, —É –≤–∞—Å: ${playerData.stars}`);
        return;
    }
    
    if (window.Telegram.WebApp.openInvoice) {
        const invoice = {
            title: `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—é–∂–µ—Ç–∞ "${caseId}"`,
            description: `–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É —Å—é–∂–µ—Ç—É –∑–∞ ${price} –∑–≤–µ–∑–¥`,
            currency: "USD",
            prices: [{ label: `${price} –∑–≤–µ–∑–¥`, amount: (price * 100).toString() }]
        };
        
        window.Telegram.WebApp.openInvoice(invoice, async (status) => {
            if (status === 'paid') {
                playerData.stars -= price;
                playerData.unlockedCases.push(caseId);
                await loadCases();
                localStorage.setItem('detectiveSave', JSON.stringify(playerData));
                alert(`–°—é–∂–µ—Ç "${caseId}" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`);
            }
        });
    } else {
        // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Telegram
        playerData.stars -= price;
        playerData.unlockedCases.push(caseId);
        await loadCases();
        localStorage.setItem('detectiveSave', JSON.stringify(playerData));
        alert(`[DEV MODE] –°—é–∂–µ—Ç "${caseId}" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`);
    }
}