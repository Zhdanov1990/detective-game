let currentCase = null;
let currentScene = null;
const playerData = {
    name: '–î–µ—Ç–µ–∫—Ç–∏–≤',
    currentCase: null,
    collectedClues: [],
    interrogationLog: []
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
document.addEventListener('DOMContentLoaded', async () => {
    try {
        const response = await fetch('cases-list.json');
        const cases = await response.json();
        const casesList = document.getElementById('cases-list');
        casesList.innerHTML = '';

        cases.forEach(caseItem => {
            const card = document.createElement('div');
            card.className = 'case-item';
            card.innerHTML = `
                <h3>${caseItem.title}</h3>
                <p>${caseItem.description}</p>
                <button class="start-btn" data-case="${caseItem.id}">üîç –ù–∞—á–∞—Ç—å</button>
            `;
            casesList.appendChild(card);
        });

        document.querySelectorAll('.start-btn').forEach(btn => {
            btn.addEventListener('click', () => startCase(btn.dataset.case));
        });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤:', e);
    }
});

async function startCase(caseId) {
    try {
        const response = await fetch(`cases/free/${caseId}.json`);
        currentCase = await response.json();

        playerData.collectedClues = [];
        playerData.interrogationLog = [];
        playerData.currentCase = caseId;

        document.getElementById('main-menu').style.display = 'none';
        document.getElementById('game-container').style.display = 'block';
        document.getElementById('ending-screen').style.display = 'none';

        const startScene = currentCase.startScene;
        showScene(startScene);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–∞:', e);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

function showScene(sceneId) {
    const scene = currentCase.scenes[sceneId];
    if (!scene) return;

    currentScene = sceneId;
    document.getElementById('case-title').textContent = currentCase.title;
    document.getElementById('scene-text').innerHTML = scene.text.replace(/{name}/g, playerData.name);

    const choicesContainer = document.getElementById('choices');
    choicesContainer.innerHTML = '';

    if (scene.choices && scene.choices.length > 0) {
        scene.choices.forEach(choice => {
            const btn = document.createElement('button');
            btn.className = 'choice-btn';
            btn.textContent = choice.text;

            btn.addEventListener('click', () => {
                if (choice.clue && !playerData.collectedClues.includes(choice.clue)) {
                    playerData.collectedClues.push(choice.clue);
                }
                if (choice.next) {
                    showScene(choice.next);
                } else if (scene.final) {
                    showEnding(sceneId);
                }
            });

            choicesContainer.appendChild(btn);
        });
    } else if (scene.final) {
        showEnding(sceneId);
    }

    updateCluesUI();
}

function updateCluesUI() {
    const totalClues = currentCase.cluesToSolve || 0;
    const foundClues = playerData.collectedClues.length;
    document.getElementById('clue-counter').textContent = `üîç –£–ª–∏–∫: ${foundClues}/${totalClues}`;
}

function showEnding(finalSceneId) {
    const ending = currentCase.scenes[finalSceneId];
    if (!ending) return;

    let endingType = "bad";
    if (ending.result === 'good') endingType = 'good';
    else if (ending.result === 'neutral') endingType = 'neutral';

    const endings = {
        good: ["–î–µ–ª–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ!", "–í—ã –Ω–∞—à–ª–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞!"],
        neutral: ["–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö", "–í—ã –æ—à–∏–±–ª–∏—Å—å —Å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–º, –Ω–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ—á—Ç–∏ —Ä–∞—Å–∫—Ä—ã—Ç–æ"],
        bad: ["–ü—Ä–æ–≤–∞–ª", "–í—ã –ø–æ—Å–∞–¥–∏–ª–∏ –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ–≥–æ, –∞ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –Ω–∞ —Å–≤–æ–±–æ–¥–µ"]
    };

    const [title, text] = endings[endingType];

    document.getElementById('ending-title').textContent = title;
    document.getElementById('ending-text').textContent = text;

    document.getElementById('game-container').style.display = 'none';
    document.getElementById('ending-screen').style.display = 'block';
}

function returnToMenu() {
    document.getElementById('game-container').style.display = 'none';
    document.getElementById('ending-screen').style.display = 'none';
    document.getElementById('main-menu').style.display = 'block';
}
