let currentCase = null;
let currentScene = null;
let playerData = {
    name: '–î–µ—Ç–µ–∫—Ç–∏–≤',
    stars: 0,
    cluesFound: 0,
    unlockedCases: ['hotel_murder'],
    choices: [],
    currentCase: null
};

document.addEventListener('DOMContentLoaded', async () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    if (window.Telegram.WebApp.initDataUnsafe.user) {
        playerData.name = window.Telegram.WebApp.initDataUnsafe.user.first_name || playerData.name;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const savedData = localStorage.getItem('detectiveSave');
    if (savedData) {
        try {
            const parsedData = JSON.parse(savedData);
            playerData = {...playerData, ...parsedData};
        } catch (e) {
            console.error('Error parsing saved data:', e);
        }
    }
    
    await loadCases();
    setupDonateButton();
    setupAboutModal();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    if (playerData.currentCase) {
        document.getElementById('continue-btn').style.display = 'block';
    }
});

async function loadCases() {
    try {
        const response = await fetch('cases/cases-list.json');
        const cases = await response.json();
        const casesList = document.getElementById('cases-list');
        casesList.innerHTML = '';

        for (const caseItem of cases) {
            const caseElement = document.createElement('div');
            caseElement.className = `case-item ${playerData.unlockedCases.includes(caseItem.id) ? '' : 'locked'}`;
            
            caseElement.innerHTML = `
                <div class="case-content">
                    <h3>${caseItem.title}</h3>
                    <p>${caseItem.description}</p>
                    <div class="case-buttons">
                        ${!playerData.unlockedCases.includes(caseItem.id) ? 
                        `<button class="unlock-btn" data-case="${caseItem.id}" 
                                data-price="${caseItem.price}">
                            üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (${caseItem.price} ‚≠ê)
                        </button>` : ''}
                        <button class="play-btn" data-case="${caseItem.id}">
                            üîç –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                        </button>
                    </div>
                </div>
            `;
            
            casesList.appendChild(caseElement);
        }

        document.querySelectorAll('.play-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const caseId = e.target.dataset.case;
                await startCase(caseId);
            });
        });

        document.querySelectorAll('.unlock-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const caseId = e.target.dataset.case;
                const price = parseInt(e.target.dataset.price);
                await unlockCase(caseId, price);
            });
        });
    } catch (error) {
        console.error('Error loading cases:', error);
    }
}

async function startCase(caseId) {
    try {
        const path = `cases/${caseId.includes('premium') ? 'premium' : 'free'}/${caseId}.json`;
        const response = await fetch(path);
        currentCase = await response.json();
        playerData.cluesFound = 0;
        playerData.choices = [];
        playerData.currentCase = caseId;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        localStorage.setItem('detectiveSave', JSON.stringify(playerData));
        
        document.getElementById('main-menu').style.display = 'none';
        document.getElementById('game-container').style.display = 'block';
        document.getElementById('ending-screen').style.display = 'none';
        
        showScene(currentCase.startScene);
    } catch (error) {
        console.error('Error loading case:', error);
    }
}

function showScene(sceneId) {
    const scene = currentCase.scenes[sceneId];
    if (!scene) {
        console.error(`Scene not found: ${sceneId}`);
        showEnding();
        return;
    }
    
    currentScene = sceneId;
    
    document.getElementById('case-title').textContent = currentCase.title;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
    const sceneTextElement = document.getElementById('scene-text');
    sceneTextElement.innerHTML = scene.text.replace(/{name}/g, playerData.name);
    sceneTextElement.style.animation = 'none'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
        sceneTextElement.style.animation = 'fadeIn 0.8s ease-out forwards';
    }, 10);
    
    const choicesContainer = document.getElementById('choices');
    choicesContainer.innerHTML = '';
    
    if (scene.choices) {
        scene.choices.forEach(choice => {
            const button = document.createElement('button');
            button.className = 'choice-btn';
            button.innerHTML = choice.text;
            button.onclick = () => {
                if (choice.clue) playerData.cluesFound++;
                playerData.choices.push(choice.next);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                localStorage.setItem('detectiveSave', JSON.stringify(playerData));
                
                showScene(choice.next);
            };
            choicesContainer.appendChild(button);
        });
    } else {
        showEnding();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–ª–∏–∫
    document.getElementById('clue-counter').innerHTML = `üîç –£–ª–∏–∫ –Ω–∞–π–¥–µ–Ω–æ: ${playerData.cluesFound}/${currentCase.cluesToSolve}`;
}

function showEnding() {
    const endings = currentCase.endings;
    let endingType = "bad";
    
    if (endings.good && 
        playerData.cluesFound >= endings.good.requiredClues && 
        endings.good.requiredChoices.every(choice => playerData.choices.includes(choice))) {
        endingType = "good";
    } else if (endings.neutral && playerData.cluesFound >= endings.neutral.requiredClues) {
        endingType = "neutral";
    }
    
    const ending = endings[endingType];
    const endingScene = currentCase.scenes[ending.scene];
    
    document.getElementById('ending-title').textContent = 
        endingType === 'good' ? '–î–µ–ª–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ!' :
        endingType === 'neutral' ? '–ö–æ–º–ø—Ä–æ–º–∏—Å—Å' : '–ü—Ä–æ–≤–∞–ª';
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ü–æ–≤–∫–∏
    const endingTextElement = document.getElementById('ending-text');
    endingTextElement.innerHTML = endingScene.text;
    endingTextElement.style.animation = 'none';
    setTimeout(() => {
        endingTextElement.style.animation = 'fadeIn 0.8s ease-out forwards';
    }, 10);
    
    document.getElementById('ending-stats').innerHTML = `
        <p>üîç –ù–∞–π–¥–µ–Ω–æ —É–ª–∏–∫: ${playerData.cluesFound}/${currentCase.cluesToSolve}</p>
        <p>‚öñÔ∏è –í–µ—Ä–¥–∏–∫—Ç: ${endingType === 'good' ? '–ü–æ–ª–Ω—ã–π —É—Å–ø–µ—Ö' : endingType === 'neutral' ? '–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö' : '–ü—Ä–æ–≤–∞–ª'}</p>
    `;
    
    document.getElementById('game-container').style.display = 'none';
    document.getElementById('ending-screen').style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–ª–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    playerData.currentCase = null;
    localStorage.setItem('detectiveSave', JSON.stringify(playerData));
}

function returnToMenu() {
    document.getElementById('game-container').style.display = 'none';
    document.getElementById('ending-screen').style.display = 'none';
    document.getElementById('main-menu').style.display = 'block';
}

function setupAboutModal() {
    const modal = document.getElementById('about-modal');
    const btn = document.getElementById('about-btn');
    const span = document.getElementsByClassName('close-btn')[0];

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    btn.onclick = function() {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    span.onclick = function() {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–∫–Ω–∞
    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && modal.style.display === 'flex') {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });
}

// –î–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ payment.js)
function setupDonateButton() {
    document.getElementById('donate-btn').addEventListener('click', () => {
        if (window.Telegram.WebApp.openInvoice) {
            const invoice = {
                title: "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞",
                description: "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏",
                currency: "USD",
                prices: [
                    { label: "50 –∑–≤–µ–∑–¥", amount: "500" },
                    { label: "100 –∑–≤–µ–∑–¥", amount: "1000" }
                ]
            };
            
            window.Telegram.WebApp.openInvoice(invoice, (status) => {
                if (status === 'paid') {
                    alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!');
                }
            });
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
        }
    });
}

async function unlockCase(caseId, price) {
    if (window.Telegram.WebApp.openInvoice) {
        const invoice = {
            title: `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—é–∂–µ—Ç–∞ "${caseId}"`,
            description: `–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É —Å—é–∂–µ—Ç—É –∑–∞ ${price} –∑–≤–µ–∑–¥`,
            currency: "USD",
            prices: [{ label: `${price} –∑–≤–µ–∑–¥`, amount: (price * 10).toString() }]
        };
        
        window.Telegram.WebApp.openInvoice(invoice, async (status) => {
            if (status === 'paid') {
                playerData.unlockedCases.push(caseId);
                await loadCases();
                localStorage.setItem('detectiveSave', JSON.stringify(playerData));
            }
        });
    } else {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
    }
}